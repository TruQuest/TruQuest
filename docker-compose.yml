version: '2'

services:
  pg:
    image: bitnami/postgresql:14.2.0
    environment:
      POSTGRESQL_WAL_LEVEL: logical
      POSTGRESQL_DATABASE: TruQuest
      POSTGRESQL_PASSWORD: password
      POSTGRESQL_SHARED_PRELOAD_LIBRARIES: pgaudit,pg_stat_statements
    ports:
      - '5433:5432'
    networks:
      - truquest

  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - '2181:2181'
    networks:
      - truquest
    restart: unless-stopped

  kafka-1:
    image: wurstmeister/kafka:2.12-2.5.0
    ports:
      - '9092:9092'
    environment:
      DOCKER_API_VERSION: 1.22
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_HOST_NAME: host.docker.internal
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_CREATE_TOPICS: 'thing.events:1:1,updates:1:1,requests:1:1,responses:1:1'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - truquest
    restart: unless-stopped

  debezium:
    image: debezium/connect
    environment:
      BOOTSTRAP_SERVERS: 'kafka-1:9092'
      GROUP_ID: debez
      CONFIG_STORAGE_TOPIC: debez_connect_configs
      OFFSET_STORAGE_TOPIC: debez_connect_offsets
      STATUS_STORAGE_TOPIC: debez_connect_statuses
    ports:
      - '8083:8083'
    networks:
      - truquest
    depends_on:
      - pg
      - zookeeper
      - kafka-1

  ipfs:
    image: ipfs/kubo
    ports:
      - '4001:4001'
      - '4001:4001/udp'
      - '8080:8080'
      - '5001:5001'
    networks:
      - truquest
    volumes:
      - ./ipfs/data:/data/ipfs

  bundler:
    image: etherspot/skandha:1.0.22-alpha
    command: 'standalone --unsafeMode'
    volumes:
      - type: bind
        source: ${PWD}/bundler-config.json
        target: /usr/app/config.json
    ports:
      - 3000:14337
    networks:
      - truquest

  kafka-ui:
    image: provectuslabs/kafka-ui
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-1:9092
    ports:
      - '7777:8080'
    networks:
      - truquest
    depends_on:
      - zookeeper
      - kafka-1

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.80.0
    command: [ --config=/etc/otel-collector-config.yml ]
    volumes:
      - ./otel-collector-config.yml:/etc/otel-collector-config.yml
    ports:
      - 4317:4317
    networks:
      - truquest
    depends_on:
      - uptrace

  file-archive:
    image: file-archive-new:latest
    build:
      context: src/Orchestrator/services/FileArchiveService
    environment:
      DOTNET_ENVIRONMENT: Development
      ASPNETCORE_ENVIRONMENT: Development
      WebPageScreenshots__ApiFlash__AccessKey: ${WebPageScreenshots__ApiFlash__AccessKey}
    volumes:
      - './src/Orchestrator/services/FileArchiveService/user_files:/user_files'
      - './src/Orchestrator/services/FileArchiveService/images:/images'
      - './src/Orchestrator/services/FileArchiveService/screenshots:/screenshots'
    networks:
      - truquest
    depends_on:
      - zookeeper
      - kafka-1
      - ipfs
      - otel-collector

  clickhouse:
    image: clickhouse/clickhouse-server:23.4
    restart: on-failure
    environment:
      CLICKHOUSE_DB: uptrace
    healthcheck:
      test: ['CMD', 'wget', '--spider', '-q', 'localhost:8123/ping']
      interval: 1s
      timeout: 1s
      retries: 30
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    ports:
      - '8123:8123'
      - '9000:9000'
    networks:
      - truquest

  uptrace:
    image: 'uptrace/uptrace:1.5.6'
    restart: on-failure
    volumes:
      - ./uptrace/uptrace-dev.yml:/etc/uptrace/uptrace.yml
      - ./uptrace/uptrace.crt:/etc/uptrace/tls/uptrace.crt
      - ./uptrace/uptrace.key:/etc/uptrace/tls/uptrace.key
    ports:
      - '14317:14317'
      - '14318:14318'
    networks:
      - truquest

  mailhog:
    image: mailhog/mailhog:v1.0.1
    restart: on-failure
    ports:
      - '8025:8025'
    networks:
      - truquest

volumes:
  jaeger_data:
  clickhouse_data:

networks:
  truquest:
    driver: bridge
